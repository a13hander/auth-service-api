syntax = "proto3";

package auth_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/a13hander/auth-service-app/pkg/auth_v1;auth_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Auth service"
    version: "1.0.0"
  }
  host: "localhost:8080"
  schemes: HTTP
};

service AuthV1 {
  // Создает пользователя
  rpc Create(CreateRequest) returns (CreateResponse) {
    option(google.api.http) = {
      post: "/auth/v1/user-create"
      body: "*"
    };
  };
  // Список пользователей
  rpc List(google.protobuf.Empty) returns (ListResponse) {
    option(google.api.http) = {
      post: "/auth/v1/user-list"
      body: "*"
    };
  };
  // Получение refresh токена
  rpc GetRefreshToken(GetRefreshTokenRequest) returns (RefreshTokenResponse) {}
  // Получение access токена
  rpc GetAccessToken(GetAccessTokenRequest) returns (AccessTokenResponse) {}
}

enum Role {
  USER = 0;
  ADMIN = 1;
}

message Engineer {
  int64 level = 1;
  string company = 2;
  string language = 3;
}

message Manager {
  int64 level = 1;
  string company = 2;
  int64 experience = 3;
}

message UserInfo {
  string email = 1 [(validate.rules).string.email = true, (validate.rules).string.max_len = 100];
  string username = 2 [(validate.rules).string.min_len = 2, (validate.rules).string.max_len = 100];
  Role role = 3;
  oneof specialisation {
    Engineer engineer = 4;
    Manager manager = 5;
  }
}

message User {
  uint32 id = 1;
  UserInfo info = 2;
  google.protobuf.Timestamp created_at = 3;
}

message CreateRequest {
  UserInfo user = 1;
  string password = 2 [(validate.rules).string.min_len = 8, (validate.rules).string.max_len = 32];
  string password_confirm = 3 [(validate.rules).string.min_len = 8, (validate.rules).string.max_len = 32];
}

message CreateResponse {
  uint32 id = 1;
}

message ListResponse {
  repeated User user = 1;
}

message GetRefreshTokenRequest {
  string username = 1;
  string password = 2;
}

message GetAccessTokenRequest {
  string refreshToken = 1;
}

message RefreshTokenResponse {
  string refresh_token = 1;
}

message AccessTokenResponse {
  string access_token = 1;
}